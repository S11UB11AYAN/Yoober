* Day 1 - June 25, 2025
** Backend Setup
- Initialized backend with Express
- Initialized a Git repository and pushed to GitHub
- Connected to MongoDB using Mongoose

** User Schema
- Created `User` schema with the following fields:

#+BEGIN_SRC javascript
const userSchema = new mongoose.Schema({
  fullname: {
    firstname: {
      type: String,
      required: true,
      minlength: [3, 'First name must be atleast 3 characters long']
    },
    lastname: {
      type: String,
      required: true,
      minlength: [3, 'First name must be atleast 3 characters long']
    }
  },
  email: {
    type: String,
    required: true,
    unique: true,
    minlength: [5, 'Email must be atleast 5 characters long']
  },
  password: {
    type: String,
    required: true,
    select: false
  },
  socketId: {
    type: String
  }
}, { timestamps: true });
#+END_SRC

** Schema Notes
- `fullname` is a nested object containing `firstname` and `lastname`, both with validation rules.
- `email` is unique and required, with basic validation.
- `password` uses `select: false` to prevent it from being returned in query results.
- `socketId` will be used for real-time features via Socket.io.
- `timestamps: true` adds `createdAt` and `updatedAt` automatically.

** Installed NPM Packages
- `express`: Backend server
- `mongoose`: ODM for MongoDB
- `dotenv`: Load env variables from `.env`
- `cors`: Handle cross-origin requests
- `cookie-parser`: Parse cookies (used in auth)
- `bcrypt`: Hash passwords securely
- `jsonwebtoken`: Issue and verify JWTs

** Next Steps
- Add hashing with bcrypt before saving passwords
- Build `/register` and `/login` routes
- Setup JWT generation on login and secure private routes
