#+OPTIONS: toc:nil
* 🚕 Yoober – A Full-Stack Uber Clone (MERN)

This document is a day-wise dev log of **Yoober**, a full-stack Uber clone built using the **MERN** stack.

Each entry includes:
- ✅ Tasks done
- 📖 Code snippets
- 🧠 Lessons learned
- 🧪 Errors + Debugging steps

---

* 📆 Day 1 – June 25, 2025

** ✅ Backend Setup
- Initialized Express backend
- Created Git repository and pushed initial commit to GitHub
- Connected to MongoDB using Mongoose

** 🧠 User Schema (What a User Looks Like)
Created a Mongoose schema for users with the following fields:

- `fullname`:
  - `firstname`: required, min 3 chars
  - `lastname`: required, min 3 chars
- `email`: unique, required, min 5 chars
- `password`: required, not returned in queries (`select: false`)
- `socketId`: for future real-time features (e.g. live location)
- `timestamps`: auto-generates `createdAt` and `updatedAt`

#+BEGIN_SRC javascript
const userSchema = new mongoose.Schema({
  fullname: {
    firstname: {
      type: String,
      required: true,
      minlength: [3, 'First name must be at least 3 characters long']
    },
    lastname: {
      type: String,
      required: true,
      minlength: [3, 'Last name must be at least 3 characters long']
    }
  },
  email: {
    type: String,
    required: true,
    unique: true,
    minlength: [5, 'Email must be at least 5 characters long']
  },
  password: {
    type: String,
    required: true,
    select: false
  },
  socketId: {
    type: String
  }
}, { timestamps: true });
#+END_SRC

** 📦 Installed NPM Packages
- express
- mongoose
- dotenv
- cors
- cookie-parser
- bcrypt
- jsonwebtoken

---

* 📆 Day 2 – June 26, 2025

** ✅ What I Did
- Ran and tested the code written on Day 1
- Created helper methods in user schema:
  - `hashPassword`
  - `comparePassword`
  - `generateAuthToken`
- Created service layer (`createUser`)
- Created controller (`registerUser`)
- Set up `/register` route with validation

** 🧨 Errors Faced

*** MongoDB Namespace Error
#+BEGIN_EXAMPLE
MongoServerError: Invalid namespace specified: /undefined.users
#+END_EXAMPLE

Cause:
- I was importing MongoDB base URL from `.env`
- And trying to append the DB name from a `constants` file
- This resulted in an invalid URL like: `/undefined.users`

*** Missing Package Imports
- Forgot to import `bcrypt` and `jsonwebtoken` in `user.models.js`

** 🛠️ How I Fixed It
- Carefully read the full error trace
- Removed the constants file entirely
- Used the **full MongoDB URI** directly from `.env` like:
#+BEGIN_SRC dotenv
MONGO_URI=mongodb://localhost:27017/yoober
#+END_SRC

- Added missing imports in model file:
#+BEGIN_SRC javascript
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
#+END_SRC

** 🧠 Notes / Lessons Learned
- Always validate env vars with `console.log`
- Don’t split connection strings unless necessary
- Error messages are usually very helpful
- Used StackOverflow (no GPT!) to debug and learn better

** 📤 Sample Register Response
#+BEGIN_SRC json
{
  "token": "<JWT token>",
  "newUser": {
    "fullname": {
      "firstname": "Alice",
      "lastname": "Smith"
    },
    "email": "alice@example.com"
  }
}
#+END_SRC

** 🔄 Auth Flow Summary
#+BEGIN_EXAMPLE
Client --> /register (Route)
       --> registerUser (Controller)
       --> createUser (Service)
       --> save in MongoDB (Model)
       --> return token + user
#+END_EXAMPLE

** ✅ Features Completed
- Working `/register` endpoint with hashed password and JWT
- Fixed critical MongoDB connection issue
- Auth utilities working as expected
